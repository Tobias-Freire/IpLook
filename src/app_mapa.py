import streamlit as st
import socket
import folium
from streamlit_folium import st_folium
import integration_service
from streamlit_js_eval import get_geolocation

# Configura√ß√£o inicial
st.set_page_config(layout="centered")
st.title("üìç Rastreamento de Rota do Usu√°rio at√© o Dom√≠nio")

# Estado inicial da sess√£o
if "last_processed_domain" not in st.session_state:
    st.session_state.last_processed_domain = None
    st.session_state.route_info = None
    st.session_state.target_ip = None
    st.session_state.user_location = None

def get_user_location():
    """Obt√©m e armazena a localiza√ß√£o do usu√°rio"""
    with st.spinner("Obtendo sua localiza√ß√£o..."):
        location = get_geolocation()
        if location and location.get("coords"):
            st.session_state.user_location = location
            return True
    st.warning("N√£o foi poss√≠vel obter sua localiza√ß√£o.")
    return False

def process_domain(domain):
    """Processa o dom√≠nio alvo e obt√©m informa√ß√µes de rota"""
    try:
        ip_alvo = socket.gethostbyname(domain)
        st.session_state.target_ip = ip_alvo
        st.session_state.route_info = integration_service.get_route_info(domain)
        return True
    except socket.gaierror:
        st.error(f"Dom√≠nio inv√°lido: {domain}")
        return False

def create_map(user_coords, route_info, target_domain):
    """Cria o mapa com a rota tra√ßada corretamente"""
    # Prepara pontos do mapa come√ßando com a localiza√ß√£o do usu√°rio
    map_points = [{
        'latitude': user_coords['latitude'],
        'longitude': user_coords['longitude'],
        'tipo': 'Voc√™',
        'info': 'Sua localiza√ß√£o',
        'order': 0  # Mant√©m a ordem original
    }]
    
    # Adiciona todos os hops com suas informa√ß√µes
    for hop, info in sorted(route_info.items(), key=lambda x: x[0]):
        if info:
            hop_data = {
                'latitude': None,
                'longitude': None,
                'tipo': f'Hop {hop}',
                'info': f"Hop: {hop}<br>IP: {info.get('ip')}<br>Cidade: {info.get('city')}<br>Estado: {info.get('region')}<br>Pa√≠s: {info.get('country')}<br>Provedor: {info.get('provider')}<br>Localiza√ß√£o: {info.get('loc')}",
                'order': hop,  # Mant√©m a ordem original dos hops
                'is_last': hop == max(route_info.keys())  # Marca o √∫ltimo hop
            }
            if info.get('loc'):
                try:
                    lat, lon = map(float, info['loc'].split(','))
                    hop_data['latitude'] = lat
                    hop_data['longitude'] = lon
                except (ValueError, AttributeError):
                    pass
            map_points.append(hop_data)
    
    # Filtra apenas pontos com localiza√ß√£o v√°lida, mantendo a ordem original
    valid_points = sorted(
        [p for p in map_points if p['latitude'] is not None and p['longitude'] is not None],
        key=lambda x: x['order']
    )
    
    if len(valid_points) < 2:
        st.warning("N√£o h√° pontos suficientes com localiza√ß√£o v√°lida para tra√ßar a rota.")
        return None
    
    # Calcula o centro do mapa
    media_lat = sum(p['latitude'] for p in valid_points) / len(valid_points)
    media_lon = sum(p['longitude'] for p in valid_points) / len(valid_points)
    
    # Cria o mapa
    m = folium.Map(location=[media_lat, media_lon], zoom_start=4)
    
    # Adiciona marcadores com cores diferentes
    for point in valid_points:
        # Determina a cor do √≠cone
        if point['tipo'] == 'Voc√™':
            icon_color = 'red'  # Sua localiza√ß√£o
        elif point.get('is_last'):
            icon_color = 'blue'  # Destino final
        else:
            icon_color = 'green'  # Hops intermedi√°rios
        
        folium.Marker(
            [point['latitude'], point['longitude']],
            popup=point['info'],
            tooltip=f"{point['tipo']} - {target_domain}" if point.get('is_last') else point['tipo'],
            icon=folium.Icon(
                color=icon_color,
                icon='server' if point.get('is_last') else 'info-sign',
                prefix='fa' if point.get('is_last') else None  # Usa Font Awesome para o √≠cone de destino
            )
        ).add_to(m)
    
    # Conecta os pontos na ordem correta
    folium.PolyLine(
        [(p['latitude'], p['longitude']) for p in valid_points],
        color="blue",
        weight=2.5,
        opacity=1,
        tooltip=f"Rota para {target_domain}"
    ).add_to(m)
    
    return m

container = st.container()
with container:
    dominio_alvo = st.text_input("Digite o dom√≠nio para rastrear a rota:")

# Obt√©m localiza√ß√£o do usu√°rio se ainda n√£o tiver
if not st.session_state.user_location:
    if not get_user_location():
        st.stop()
with st.expander("Localiza√ß√£o do Usu√°rio"):
    st.write(st.session_state.user_location)

# Processa dom√≠nio apenas se for novo
if dominio_alvo and dominio_alvo != st.session_state.last_processed_domain:
    st.session_state.last_processed_domain = dominio_alvo
    if process_domain(dominio_alvo):
        st.rerun()
    else:
        st.stop()

# Exibe informa√ß√µes se dispon√≠veis
if dominio_alvo and st.session_state.route_info and st.session_state.user_location:
    coords = st.session_state.user_location["coords"]
    st.info(f"Rastreando rota de sua localiza√ß√£o at√©: {dominio_alvo} ({st.session_state.target_ip})")
    
    with st.expander("Detalhes do resultado do rastreamento"):
        st.write(st.session_state.route_info)
    
    # Cria e exibe o mapa
    mapa = create_map(
        {'latitude': coords.get('latitude'), 'longitude': coords.get('longitude')},
        st.session_state.route_info,
        dominio_alvo
    )
    
    if mapa:
        st_folium(mapa, width=700, height=500)
else:
    st.info("Digite um dom√≠nio v√°lido para come√ßar o rastreamento.")